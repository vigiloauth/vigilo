name: Release

on:
  push:
    branches: [ master ]

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Create .env file
        run: |
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
          echo "SMTP_FROM_ADDRESS=${{ secrets.SMTP_FROM_ADDRESS }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "TOKEN_ISSUER=${{ secrets.TOKEN_ISSUER }}" >> .env
          echo "TOKEN_PRIVATE_KEY=${{ secrets.TOKEN_PRIVATE_KEY }}" >> .env
          echo "TOKEN_PUBLIC_KEY=${{ secrets.TOKEN_PUBLIC_KEY }}" >> .env
          echo "CRYPTO_SECRET_KEY=${{ secrets.CRYPTO_SECRET_KEY }}" >> .env

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/github

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GORELEASER_TOKEN }}
        run: |
          result=$(npx semantic-release)
          echo "$result"

          version=$(echo "$result" | grep -oP 'Published release \K[^\s]+')

          if [[ -n "$version" ]]; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            echo "new_release_version=$version" >> $GITHUB_OUTPUT
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit if no new release
        if: steps.semantic.outputs.new_release_published == 'false'
        run: echo "No new release published. Exiting gracefully."
        continue-on-error: true

      - name: Fetch tags
        if: steps.semantic.outputs.new_release_published == 'true'
        run: git fetch --tags origin

      - name: Debug Docker Build
        run: |
          echo "New release published: ${{ steps.semantic.outputs.new_release_published }}"
          echo "New version: ${{ steps.semantic.outputs.new_release_version }}"
          echo "ENV version: ${{ env.NEW_RELEASE_VERSION }}"
          # List Docker images
          docker images
          
      - name: Login to Docker Hub
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        if: steps.semantic.outputs.new_release_version != ''
        run: |
          version=${{ steps.semantic.outputs.new_release_version }}
          echo "Building Docker image for version $version"
          docker build -f Dockerfile -t vigiloauth/server:$version -t vigiloauth/server:latest .
          echo "Pushing Docker image..."
          docker push vigiloauth/server:$version
          docker push vigiloauth/server:latest
        working-directory: ${{ github.workspace }}