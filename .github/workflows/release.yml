name: Release

on:
  pull_request:
    types:
      - labeled
      - synchronize
      - opened
      - closed
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.23.3'

      - name: Install GoReleaser
        run: |
          curl -sL https://github.com/goreleaser/goreleaser/releases/download/v1.0.0/goreleaser_Linux_x86_64.tar.gz | tar -xzv
          sudo mv goreleaser /usr/local/bin/

      - name: Read current version from .github/VERSION
        id: get_version
        run: |
          VERSION=$(cat .github/VERSION)
          echo "Current version: $VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Determine version from PR labels
        id: version
        if: github.event_name == 'pull_request'
        run: |
          # Logic to determine new version based on labels (similar to previous steps)
          # Output the version as set-output

      - name: Write new version to .github/VERSION file
        run: echo "${{ steps.version.outputs.version }}" > .github/VERSION

      - name: Create and Push Git Tag
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        env:
          VERSION: ${{ steps.version.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag $VERSION
          git push origin $VERSION

      - name: Run GoReleaser
        run: goreleaser release --config .goreleaser.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
