name: Release

on:
  push:
    branches: [ master ]

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/github

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GORELEASER_TOKEN }}
        run: |
          npx semantic-release
          echo "new_release_published=${{ env.NEW_RELEASE_PUBLISHED }}" >> $GITHUB_OUTPUT
          echo "new_release_version=${{ env.NEW_RELEASE_VERSION }}" >> $GITHUB_OUTPUT

      # This crucial step fetches the newly created tag
      - name: Fetch tags
        if: steps.semantic.outputs.new_release_published == 'true'
        run: git fetch --tags origin

      - name: Install GoReleaser
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: goreleaser/goreleaser-action@v5
        with:
          install-only: true

      - name: Run GoReleaser
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GORELEASER_TOKEN }}

      - name: Debug Docker Build
        run: |
          echo "New release published: ${{ steps.semantic.outputs.new_release_published }}"
          echo "New version: ${{ steps.semantic.outputs.new_release_version }}"
          echo "ENV version: ${{ env.NEW_RELEASE_VERSION }}"
          # List Docker images
          docker images

      - name: Login to Docker Hub
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        if: env.NEW_RELEASE_VERSION != ''
        run: |
          echo "Building Docker image for version ${{ env.NEW_RELEASE_VERSION }}"
          docker build -t vigiloauth/server:${{ env.NEW_RELEASE_VERSION }} -t vigiloauth/server:latest .
          echo "Pushing Docker image..."
          docker push vigiloauth/server:${{ env.NEW_RELEASE_VERSION }}
          docker push vigiloauth/server:latest